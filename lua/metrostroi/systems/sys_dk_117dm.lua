--------------------------------------------------------------------------------
-- Тяговый электродвигатель постоянного тока (ДК-117ДМ)
--------------------------------------------------------------------------------
Metrostroi.DefineSystem("DK_117DM")

function TRAIN_SYSTEM:Initialize()
	self.Name = "DK_117DM"
	
	-- Winding resistance
	self.Rw = 0.600 -- Ohms
	
	-- Voltage generated by engine
	self.E13 = 0.0 -- Volts
	self.E24 = 0.0 -- Volts
end

function TRAIN_SYSTEM:Inputs()
	return { }
end

function TRAIN_SYSTEM:Outputs()
	return { }
end

function TRAIN_SYSTEM:Think(dT)
	--[[local Train = self.Train

	-- Calculate magnetic flux as shunted
	--local magneticFlux13 = 1.0
	--local magneticFlux24 = 1.0	
	local magneticFlux13 = 0.35 + 0.65*(Train.Electric.Shunt1Resistance/1.6)
	local magneticFlux24 = 0.35 + 0.65*(Train.Electric.Shunt2Resistance/1.6)
	--print(Train.Electric.Shunt1Resistance,Train.Electric.Block1Resistance,magneticFlux13)	
	
	-- Get rate of engine rotation
	local rotationRate = 4000 * ((Train.FrontBogey.Speed + Train.RearBogey.Speed)/90) / 2
	self.SmoothRotationRate = (self.SmoothRotationRate or 0)
	self.SmoothRotationRate = self.SmoothRotationRate + 5.0 * (rotationRate - self.SmoothRotationRate) * dT
	rotationRate = self.SmoothRotationRate
	
	-- Calculate voltage generated by engines from magnetic flux
	local E13 = 0.17 * rotationRate * magneticFlux13
	local E24 = 0.17 * rotationRate * magneticFlux24
	
	-- Heat output in resistor blocks 1, 2
	local Presistance13
    local Presistance24
	-- Current through engine sets
	local Ianchor13
	local Ianchor24
	
	-- Series connection
	if Train.T_Parallel.Value == 0.0 then
		-- Total voltage over entire circuit
		local totalV = Train.Electric.Power750V * Train.LK3.Value * Train.LK4.Value
		-- Calculate total resistance of the circuit
		local totalR = Train.Electric.Block1Resistance + 
					   Train.Electric.Block2Resistance + 
					   Train.Electric.ExtraResistance + 2 * self.Rw
		
		-- Calculate current flowing through anchors
		local Ianchor = (totalV - E13 - E24) / (totalR)
		--if Ianchor < 0.0 then Ianchor = 0.0 end
		
		-- Only let current flow in a completed circuit
		Ianchor = Ianchor*Train.LK4.Value*Train.LK3.Value*Train.GV.Value*Train.RPL.Value*
					Train.RP1_3.Value*Train.RP2_4.Value
		Ianchor13 = Ianchor
		Ianchor24 = Ianchor
		self.RUTCurrent = math.abs(Ianchor)
		
		-- Calculate total power radiation
		local Presistance = Ianchor * ((Train.Electric.Block1Resistance + 
										Train.Electric.Block2Resistance + 
										Train.Electric.ExtraResistance)^2)
		Presistance13 = Presistance * 0.5
		Presistance24 = Presistance * 0.5
	else -- Parallel connection
		-- Total voltage over entire circuit
		local totalV13 = Train.Electric.Power750V * Train.LK3.Value
		local totalV24 = Train.Electric.Power750V * Train.LK4.Value
		-- Calculate total resistance of the circuit
		local totalR13 = Train.Electric.ExtraResistance + Train.Electric.Block1Resistance + self.Rw
		local totalR24 = Train.Electric.ExtraResistance + Train.Electric.Block2Resistance + self.Rw

		-- Calculate current flowing through anchors
		Ianchor13 = (totalV13 - E13) / (totalR13)
		Ianchor24 = (totalV24 - E24) / (totalR24)
		--if Ianchor13 < 0.0 then Ianchor13 = 0.0 end
		--if Ianchor24 < 0.0 then Ianchor24 = 0.0 end
		
		-- Only let current flow in a completed circuit
		Ianchor13 = Ianchor13*Train.LK3.Value*Train.GV.Value*Train.RPL.Value*Train.RP1_3.Value
		Ianchor24 = Ianchor24*Train.LK4.Value*Train.GV.Value*Train.RPL.Value*Train.RP2_4.Value
		self.RUTCurrent = math.abs(Ianchor13) + math.abs(Ianchor24)

		-- Calculate total power radiation
		Presistance13 = Ianchor13 * ((totalR13  - self.Rw)^2)
		Presistance24 = Ianchor24 * ((totalR24  - self.Rw)^2)
	end
	
	-- Calculate engine force (moment)
	local Moment13 = (1.0/80000.0) * (Ianchor13^2)
	local Moment24 = (1.0/80000.0) * (Ianchor24^2)
	if Ianchor13 < 0.0 then Moment13 = - Moment13 end
	if Ianchor24 < 0.0 then Moment24 = - Moment24 end
	
	-- Reverser switch
	local reverse = (Train.PR_772.Value > 0.5)
	
	-- Apply moment
	Train.FrontBogey.MotorForce = 40000
	Train.FrontBogey.Reversed = reverse
	Train.RearBogey.MotorForce  = 40000
	Train.RearBogey.Reversed = not reverse
	
	if (math.abs(Ianchor13) > 0.1) or (math.abs(Ianchor24) > 0.1) then
		Train.RearBogey.MotorPower  = (Moment13 + Moment24) / 2
		Train.FrontBogey.MotorPower = (Moment13 + Moment24) / 2
	else
		Train.RearBogey.MotorPower  = 0.0
		Train.FrontBogey.MotorPower = 0.0
	end
	
	local type = "SER" if Train.T_Parallel.Value == 1 then type = "PAR" end]]--
	--[[print(Format("%s N %d  V %.0f km/h  A %.3f m/s2  I = %.1f %.1f A  M = %.4f %.1f  P = %.1f %.1f w  R1 = %.4f Ohm  R2 = %.4f Ohm",
			type,Train.RheostatController.Position,Train.FrontBogey.Speed,Train.FrontBogey.Acc or 0,
			Ianchor13,Ianchor24,Moment13,Moment24,
			Presistance13,Presistance24,
			Train.Electric.Block1Resistance,Train.Electric.Block2Resistance))
			--]]
end
